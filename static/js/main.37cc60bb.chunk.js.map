{"version":3,"sources":["Components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","props","state","columnDefs","headerName","field","defaultColDef","flex","sortable","filter","floatingFilter","rowData","this","setState","mockData","reduce","columnsSoFar","Type","TicketID","Summary","Status","CreatedDate","push","data","mapResponseData","rows","property","concat","className","style","height","width","padding","Component","App","routes","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"82CA6FeA,E,kDArFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,CACV,CAAEC,WAAY,OAAQC,MAAO,QAC7B,CAAED,WAAY,WAAYC,MAAO,YACjC,CAAED,WAAY,UAAWC,MAAO,WAChC,CAAED,WAAY,SAAUC,MAAO,UAC/B,CACED,WAAY,cACZC,MAAO,gBAIXC,cAAe,CACbC,KAAM,EACNC,UAAU,EACVC,QAAQ,EACRC,gBAAgB,GAElBC,QAAS,MApBM,E,gEAyBjB,IAAMA,EAAUC,KAAKD,UACrBC,KAAKC,SAAS,CAAEF,c,wCAKhB,OAAIG,EACaA,EAASC,QACtB,SAACC,EAAD,GAAqE,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAShD,OARKL,EAAaC,KAAOD,EAAaC,GAAQ,IAC9CD,EAAaC,GAAMK,KAAK,CACtBL,OACAC,WACAC,UACAC,SACAC,gBAEKL,IAET,IAIG,K,gCAMP,IAAMO,EAAOX,KAAKY,kBACdC,EAAO,GACX,GAAIF,EAAM,CACR,IAAK,IAAMG,KAAYH,EACrBE,EAAOA,EAAKE,OAAOJ,EAAKG,IAE1B,OAAOD,EAET,OAAO,O,+BAIP,OACE,yBACEG,UAAU,kBACVC,MAAO,CACLC,OAAQ,QACRC,MAAO,MACPC,QAAS,KAGX,kBAAC,cAAD,CACE7B,WAAYS,KAAKV,MAAMC,WACvBG,cAAeM,KAAKV,MAAMI,cAC1BK,QAASC,KAAKV,MAAMS,e,GA/ENsB,a,MCsBTC,MAlBf,WACE,IAAIC,EACF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWrC,MAIjC,OACE,yBAAK4B,UAAU,OACb,4BAAQA,UAAU,cAChB,yDACCO,KCXWG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.37cc60bb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport mockData from \"../API/mockData\";\r\n\r\n//Dashboard Component is called from APP.js when path is equal to '/' through routing \r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columnDefs: [\r\n        { headerName: \"Type\", field: \"Type\" },\r\n        { headerName: \"TicketID\", field: \"TicketID\" },\r\n        { headerName: \"Summary\", field: \"Summary\" },\r\n        { headerName: \"Status\", field: \"Status\" },\r\n        {\r\n          headerName: \"CreatedDate\",\r\n          field: \"CreatedDate\",\r\n          //comparator: this.dateComparator,\r\n        },\r\n      ],\r\n      defaultColDef: {\r\n        flex: 1,\r\n        sortable: true,\r\n        filter: true,\r\n        floatingFilter: true,\r\n      },\r\n      rowData: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const rowData = this.rowData();\r\n    this.setState({ rowData });\r\n  }\r\n\r\n  //Grouping the columns\r\n  mapResponseData() {\r\n    if (mockData) {\r\n      const result = mockData.reduce(\r\n        (columnsSoFar, { Type, TicketID, Summary, Status, CreatedDate }) => {\r\n          if (!columnsSoFar[Type]) columnsSoFar[Type] = [];\r\n          columnsSoFar[Type].push({\r\n            Type,\r\n            TicketID,\r\n            Summary,\r\n            Status,\r\n            CreatedDate,\r\n          });\r\n          return columnsSoFar;\r\n        },\r\n        []\r\n      );\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n\r\n// getting Row data from grouping\r\n  rowData() {\r\n    const data = this.mapResponseData();\r\n    let rows = [];\r\n    if (data) {\r\n      for (const property in data) {\r\n        rows = rows.concat(data[property]);\r\n      }\r\n      return rows;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"ag-theme-alpine\"\r\n        style={{\r\n          height: \"400px\",\r\n          width: \"90%\",\r\n          padding: 20,\r\n        }}\r\n      >\r\n        <AgGridReact\r\n          columnDefs={this.state.columnDefs}\r\n          defaultColDef={this.state.defaultColDef}\r\n          rowData={this.state.rowData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Dashboard from \"./Components/Dashboard\";\nimport \"./App.css\";\n\n//Main Component\n\nfunction App() {\n  var routes = (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n      </Switch>\n    </Router>\n  );\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to JIRA Dashboard</h1>\n        {routes}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}